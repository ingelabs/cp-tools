package gnu.currencygen;

import org.xml.sax.Attributes;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.InputSource;
import org.xml.sax.helpers.XMLReaderFactory;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.FileInputStream;

class SupplementalHandler extends DefaultHandler
{
  static final int STATE_ZERO = 0;
  static final int STATE_SUPPLEMENTAL = 1;
  static final int STATE_IGNORING = 2;
  static final int STATE_REGION = 3;
  static final int STATE_CURRENCY = 4;
  static final int STATE_CURRENCYDATA = 5;
  static final int STATE_ALTERNATE = 6;
  static final int STATE_SEENCURRENCY = 7;

  int state;
  int oldState;
  int ignoreLevel;

  PrintWriter output;
  
  public SupplementalHandler(PrintWriter output)
  {
    this.output = output;
  }

  public void startDocument()
  {
    output.println("# This document is automatically generated by gnu.currencygen");
    output.println();

    state = STATE_ZERO;
    ignoreLevel = 0;
  }

  public void startElement(String uri, String localName, String qName, Attributes atts)
    throws SAXException
  {
    if (ignoreLevel > 0)
      {
	ignoreLevel++;
	return;
      }

    if (localName.equals("supplementalData")) {
      checkState(STATE_ZERO, STATE_SUPPLEMENTAL);
    } else if (localName.equals("currencyData")) {
      checkState(STATE_SUPPLEMENTAL, STATE_CURRENCYDATA);
    } else if (localName.equals("region")) {
      checkState(STATE_CURRENCYDATA, STATE_REGION);
    } else if (localName.equals("currency")) {
      checkMultiState(new int[] { STATE_SEENCURRENCY, STATE_REGION }, STATE_CURRENCY);
    } else if (localName.equals("alternate")) {
      checkState(STATE_CURRENCY, STATE_ALTERNATE);
    } else {
      ignoreLevel++;
      return;
    }

    if (state == STATE_REGION)
      {
	String tRegion = (String)atts.getValue("iso3166");

	if (tRegion == null)
	  throw new SAXException("region must have a iso3166 attribute");

	output.print(tRegion + '=');
      }

    if (state == STATE_CURRENCY || state == STATE_ALTERNATE)
      {
	String tName = (String)atts.getValue("iso4217");

	if (tName == null)
	  throw new SAXException("currency must have a iso 4217 attribute");

	// We only treat current currencies.
	if (atts.getValue("before") == null)
	  {
	    if (oldState == STATE_SEENCURRENCY || state == STATE_ALTERNATE)
	      output.print(',');
	    output.print(tName);
	  }
	else
	  {
	    System.err.println("WARNING: before not supported (value="+atts.getValue("before")+")");
	  }
      }
  }

  public void endElement(String uri, String localName, String qName)
    throws SAXException
  {
    if (ignoreLevel > 0)
      {
	ignoreLevel--;
	return;
      }

    if (state == STATE_SEENCURRENCY || state == STATE_REGION)
      output.println();

    if (localName.equals("supplementalData")) {
      checkState(STATE_SUPPLEMENTAL, STATE_ZERO);
    } else if (localName.equals("currencyData")) {
      checkState(STATE_CURRENCYDATA, STATE_SUPPLEMENTAL);
    } else if (localName.equals("region")) {
      checkMultiState(new int[] { STATE_SEENCURRENCY, STATE_REGION }, STATE_CURRENCYDATA);
    } else if (localName.equals("currency")) {
      checkState(STATE_CURRENCY, STATE_SEENCURRENCY);
    } else if (localName.equals("alternate")) {
      checkState(STATE_ALTERNATE, STATE_CURRENCY);
    }
  }

  void checkState(int currentState, int newState)
    throws SAXException
  {
    if (currentState != state)
      throw new SAXException("Invalid current state " + currentState + " (was expecting " + state + ")");

    oldState = state;
    state = newState;
  }

  void checkMultiState(int[] currentStates, int newState)
    throws SAXException
  {
    int i;

    for (i = 0; i < currentStates.length; i++)
      {
	if (currentStates[i] == state)
	  break;
      }
    
    if (i == currentStates.length)
      throw new SAXException("Invalid current state " + state);

    oldState = state;
    state = newState;
  }

}

public class Main
{

  static void printVersion()
  {
    System.out.println(" This is the LDML to GNU Classpath converter (currency part)");
    System.out.println("   Copyright (C) 2004 The Free Software Foundation.");
    System.out.println();
  }

  static void printUsage()
  {
    System.out.println(" Usage: [filename]");
    System.out.println();
  }
  
  static public void main(String args[]) throws Exception
  {
    XMLReader reader;
    SupplementalHandler handler;
    InputSource source;

    printVersion();

    if (args.length != 1)
      {
	printUsage();
	return;
      }

    reader = XMLReaderFactory.createXMLReader();
    
    source = new InputSource(new FileInputStream(args[0]));

    FileWriter currencyFile = new FileWriter("iso4217.properties");
    BufferedWriter bWriter = new BufferedWriter(currencyFile);
    PrintWriter output = new PrintWriter(bWriter, true);


    handler = new SupplementalHandler(output);
    reader.setContentHandler(handler);
    
    reader.parse(source);
    
    bWriter.flush();
    
  }

}
